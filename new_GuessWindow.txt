import java.awt.EventQueue;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.border.EmptyBorder;
import java.awt.GridBagLayout;
import javax.swing.JLabel;
import java.awt.GridBagConstraints;
import java.awt.Font;
import javax.swing.JToggleButton;
import java.awt.Insets;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

public class GUI_GuessWindow extends JFrame {


	//TODO: remove
	// Create the buttons used on the form as class variables since they will be called in methods

	JToggleButton[] tglBtn = new JToggleButton[20];

	int guess = 0; // Create a class variable guess to hold the guess number


	private JPanel guessWindow;

	/**
	 * Launch the application.
	 */
	// TODO: Add a parameter to main of an integer array containing buttons to disable (previous guesses)
	public void start(){

		// TODO: Delete the auto generated block below and trigger running the GUI_GuessWindow elsewhere
		// Begin auto generated block to run the main GUI_GuessWindow method
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					GUI_GuessWindow frame = new GUI_GuessWindow();
					frame.setVisible(true);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
		// End auto generated block

		// TODO: Delete this test array block below
		// Below are some test values - delete later
		int[] intArray = new int[4];	// Example of an int array of numbers to disable
		intArray[0] = 1; 				// Populate some values into the test array
		intArray[1] = 0;
		intArray[2] = 14;
		intArray[3] = 19;


		lockButtons(intArray); 			// Run the lockButtons method with intArray

	} // End main driver code


	/**
	 * Create the frame.
	 */
	public GUI_GuessWindow() {
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 435, 282);
		guessWindow = new JPanel();
		guessWindow.setBorder(new EmptyBorder(5, 5, 5, 5));

		setContentPane(guessWindow);
		GridBagLayout gbl_contentPane = new GridBagLayout();
		gbl_contentPane.columnWidths = new int[] {60, 60, 60, 60, 60};
		gbl_contentPane.rowHeights = new int[] {0, 0, 0, 0, 0, 50, 0, 0};
		gbl_contentPane.columnWeights = new double[]{0.0, 0.0, 0.0, 0.0, 0.0};
		gbl_contentPane.rowWeights = new double[]{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, Double.MIN_VALUE};
		guessWindow.setLayout(gbl_contentPane);

		JLabel lblInstructions = new JLabel("Please select your guess number.");
		lblInstructions.setFont(new Font("Tahoma", Font.PLAIN, 12));
		GridBagConstraints gbc_lblInstructions = new GridBagConstraints();
		gbc_lblInstructions.insets = new Insets(0, 0, 5, 0);
		gbc_lblInstructions.gridwidth = 5;
		gbc_lblInstructions.gridx = 0;
		gbc_lblInstructions.gridy = 0;
		guessWindow.add(lblInstructions, gbc_lblInstructions);

		GridBagConstraints[] gbc_tglBtn = new GridBagConstraints[20];

		for(int i = 0; i < 20; i++){
			tglBtn[i] = new JToggleButton((i + 1) + "");
			gbc_tglBtn[i] = new GridBagConstraints();
			gbc_tglBtn[i].fill = GridBagConstraints.BOTH;
			gbc_tglBtn[i].insets = new Insets(0, 0, 5, 5);
			gbc_tglBtn[i].gridx = i % 5;

			int yPos;

			if(i < 5)
				yPos = 0;
			else if(i < 10)
				yPos = 1;
			else if(i < 15)
				yPos = 2;
			else
				yPos = 3;

			gbc_tglBtn[i].gridy = yPos;

			System.out.println(i);
			guessWindow.add(tglBtn[i], gbc_tglBtn[i]);

			final int tempI = i;	// int i can't be passed due to not being 'final', fixed with tempI

			tglBtn[i].addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {

					untoggleButtons(tempI+1);
					tglBtn[tempI].setSelected(true);
				}
			});
		}

		JButton btnSubmit = new JButton("Submit");
		btnSubmit.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {

				guess = getGuessNumber();	// Assign the selected guess button's number to the guess class variable

				// TODO: Delete the test output below
				System.out.println(guess); // Test output - print the number to the console

				// if (guess != 0)
					// TODO: Complete the if statement above and close the GUI_GuessWindow below



			} // End actionPerformed on Submit button method
		});
		btnSubmit.setFont(new Font("Tahoma", Font.PLAIN, 12));
		GridBagConstraints gbc_btnSubmit = new GridBagConstraints();
		gbc_btnSubmit.gridwidth = 3;
		gbc_btnSubmit.insets = new Insets(0, 0, 0, 5);
		gbc_btnSubmit.gridx = 1;
		gbc_btnSubmit.gridy = 6;
		guessWindow.add(btnSubmit, gbc_btnSubmit);

	} // End GUI_GuessWindow method

	// This method will unlock all buttons on the form.
	// This method may not be useful, it depends on if the lock
	// state of the buttons persists through instances.
	public void unlockButtons() {

		for(int i = 0; i < 20; i++)	{

			tglBtn[i].setEnabled(true);

		}

	} // End unlockButtons method

	// This method will lock buttons that are already guessed/invalid.
	// It requires a parameter of an array of integers that represent
	// which buttons are to be disabled from selection.
    public void lockButtons(int[] arr) {

    	for (int i = 0; i < arr.length; i++) {

    		System.out.println(arr[i]);

			for(int j = 0; j < 20; j++){
				if(i == j){
					tglBtn[j].setEnabled(false);
				}
			}
    	} // End for loop
    } // End lockButtons method

    // This method will un-toggle all other buttons.
    // The integer parameter is the number of the button that called
    // this method. This button will not be toggled off.
    public void untoggleButtons(int num) {

		for(int i = 0; i < 20; i++){
			if(num == i){
				tglBtn[i].setSelected(false);
			}
		}
    } // End untoggleButtons method

	// This method will get the toggled button's integer value to return.
    // If there are no buttons selected, this method will return 0.
	public int getGuessNumber() {

		for (int i = 0; i < 20; i++) {

			if (tglBtn[i].isSelected() == true) return 1;

		}

		return 0; // If the method hasn't already returned a value by this point, return 0

	} // End submitGuess method

	public static void main(String[] args) {
		GUI_GuessWindow app = new GUI_GuessWindow();
		app.start();
	}

} // End GUI_GuessWindow class